//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TableTask.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PracticesDbEntities : DbContext
    {
        public PracticesDbEntities()
            : base("name=PracticesDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual ObjectResult<dbSelectStudent_Result> dbSelectStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dbSelectStudent_Result>("dbSelectStudent");
        }
    
        public virtual ObjectResult<dbEditStudent_Result> dbEditStudent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dbEditStudent_Result>("dbEditStudent", idParameter);
        }
    
        public virtual int dbUpdateEmployee(Nullable<int> id, string firstName, string lastName, string gender, string salary)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dbUpdateEmployee", idParameter, firstNameParameter, lastNameParameter, genderParameter, salaryParameter);
        }
    }
}
